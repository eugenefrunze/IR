//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""player_map"",
            ""id"": ""839bce09-e609-47f6-b0b4-a78730edf2d6"",
            ""actions"": [
                {
                    ""name"": ""strafe_left"",
                    ""type"": ""Button"",
                    ""id"": ""27061040-9874-4391-8f5e-1c55d6e97e75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""strafe_right"",
                    ""type"": ""Button"",
                    ""id"": ""effa6cec-41db-4352-b86a-88142d7d0820"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""6942fcd9-b6aa-45f0-bd1d-b348e1861bad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""roll"",
                    ""type"": ""Button"",
                    ""id"": ""332da448-c66f-4e66-8ac6-35f28287e5db"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""84315649-965b-4747-a934-b887a7b968c0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""strafe_left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f561108b-eac9-417d-8cdc-12876a7998b4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""strafe_right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b30be31-5d3f-4e53-874d-1002b428f51a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""524aab7c-ae1c-4ec8-ad8c-1136e37c7855"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""580251ce-2417-4976-b19b-e39bb4f7dd36"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1179a6af-d65e-4f07-b6ec-f2fd19acbd09"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // player_map
        m_player_map = asset.FindActionMap("player_map", throwIfNotFound: true);
        m_player_map_strafe_left = m_player_map.FindAction("strafe_left", throwIfNotFound: true);
        m_player_map_strafe_right = m_player_map.FindAction("strafe_right", throwIfNotFound: true);
        m_player_map_jump = m_player_map.FindAction("jump", throwIfNotFound: true);
        m_player_map_roll = m_player_map.FindAction("roll", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // player_map
    private readonly InputActionMap m_player_map;
    private IPlayer_mapActions m_Player_mapActionsCallbackInterface;
    private readonly InputAction m_player_map_strafe_left;
    private readonly InputAction m_player_map_strafe_right;
    private readonly InputAction m_player_map_jump;
    private readonly InputAction m_player_map_roll;
    public struct Player_mapActions
    {
        private @PlayerInputActions m_Wrapper;
        public Player_mapActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @strafe_left => m_Wrapper.m_player_map_strafe_left;
        public InputAction @strafe_right => m_Wrapper.m_player_map_strafe_right;
        public InputAction @jump => m_Wrapper.m_player_map_jump;
        public InputAction @roll => m_Wrapper.m_player_map_roll;
        public InputActionMap Get() { return m_Wrapper.m_player_map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_mapActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_mapActions instance)
        {
            if (m_Wrapper.m_Player_mapActionsCallbackInterface != null)
            {
                @strafe_left.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnStrafe_left;
                @strafe_left.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnStrafe_left;
                @strafe_left.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnStrafe_left;
                @strafe_right.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnStrafe_right;
                @strafe_right.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnStrafe_right;
                @strafe_right.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnStrafe_right;
                @jump.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnJump;
                @roll.started -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnRoll;
                @roll.performed -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnRoll;
                @roll.canceled -= m_Wrapper.m_Player_mapActionsCallbackInterface.OnRoll;
            }
            m_Wrapper.m_Player_mapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @strafe_left.started += instance.OnStrafe_left;
                @strafe_left.performed += instance.OnStrafe_left;
                @strafe_left.canceled += instance.OnStrafe_left;
                @strafe_right.started += instance.OnStrafe_right;
                @strafe_right.performed += instance.OnStrafe_right;
                @strafe_right.canceled += instance.OnStrafe_right;
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @roll.started += instance.OnRoll;
                @roll.performed += instance.OnRoll;
                @roll.canceled += instance.OnRoll;
            }
        }
    }
    public Player_mapActions @player_map => new Player_mapActions(this);
    public interface IPlayer_mapActions
    {
        void OnStrafe_left(InputAction.CallbackContext context);
        void OnStrafe_right(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
    }
}
